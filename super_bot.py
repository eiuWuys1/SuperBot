import discord
import asyncio
import random
from discord.ext import commands

intents = discord.Intents.all()

with open("tokens.txt", "r") as f:
    tokens = [line.strip() for line in f if line.strip()]

bots = []

fun_quotes = [
    "Anh hai ∆°i, mai em d·∫≠y tr·ªÖ, anh nh·ªõ g·ªçi em d·∫≠y nha, kh√¥ng c√≥ anh l√† em tr·ªÖ h·ªçc √°!",
    "Anh l√† si√™u nh√¢n c·ªßa em, d√π c√≥ d·ªØ v·ªõi em c·ª° n√†o th√¨ em v·∫´n y√™u anh nh·∫•t nh√†!",
    "Anh ƒëi ƒë√¢u l√† em nh·ªõ li·ªÅn ƒë√≥, v·ªÅ nh·ªõ mua tr√† s·ªØa cho em chu·ªôc l·ªói nha!",
    "Ai c≈©ng n√≥i em nh√µng nh·∫Ωo v·ªõi anh, nh∆∞ng m√† kh√¥ng nh√µng nh·∫Ωo v·ªõi anh th√¨ nh√µng nh·∫Ωo v·ªõi ai gi·ªù?",
    "Em m√† c√≥ g√¨ ngon l√† nghƒ© t·ªõi anh tr∆∞·ªõc √°, th∆∞∆°ng anh gh√™ lu√¥n!",
    "Ch·ªã ∆°i, mai em m∆∞·ª£n √°o nha, √°o ch·ªã lu√¥n l√†m em c·∫£m th·∫•y nh∆∞ ƒë∆∞·ª£c √¥m b·ªüi ch·ªã v·∫≠y √°!",
    "Ch·ªã l√† phi√™n b·∫£n tr∆∞·ªüng th√†nh c·ªßa em, n√™n em r√°ng h·ªçc ch·ªã t·ª´ng ch√∫t lu√¥n √°.",
    "Ch·ªã l√∫c n√†o c≈©ng lo cho em nh∆∞ m·∫π nh·ªè c·ªßa em v·∫≠y, em th∆∞∆°ng ch·ªã nhi·ªÅu l·∫Øm lu√¥n √°!",
    "Ch·ªã l√† ng∆∞·ªùi duy nh·∫•t em c√≥ th·ªÉ k·ªÉ m·∫•y chuy·ªán nh·∫£m nh√≠ m√† v·∫´n ƒë∆∞·ª£c nghe ƒë·∫øn cu·ªëi c√¢u.",
    "Em bi·∫øt em hay l√†m ch·ªã phi·ªÅn, nh∆∞ng m√† c√≥ ch·ªã ƒë·ªÉ m·∫Øng em c≈©ng th·∫•y vui vui √°!"
]

gay_responses = [
    "Gay th√¨ sao? C√≤n h∆°n th·∫±ng d·ªã ·ª©ng v·ªõi ki·∫øn th·ª©c nh∆∞ m√†y.",
    "·ª¶a? Tao gay m√† m√†y v·∫´n quan t√¢m tao d·ªØ v·∫≠y? L·ªô r·ªìi k√¨a.",
    "M√†y ch·ª≠i tao gay, m√† gi·ªçng m√†y c√≤n m·ªÅm h∆°n n∆∞·ªõc r·ª≠a ch√©n pha lo√£ng.",
    "Tao gay, c√≤n m√†y l√† s·∫£n ph·∫©m l·ªói c·ªßa x√£ h·ªôi d·ªã ·ª©ng v·ªõi LGBT.",
    "ƒê√†n √¥ng ƒë√≠ch th·ª±c kh√¥ng s·ª£ b·ªã g·ªçi l√† gay. C√≤n m√†y s·ª£ g√¨ v·∫≠y?",
    "B·ªë m√†y gay nh∆∞ng b·ªë kh√¥ng ƒë·∫ª ra c√°i l≈© ƒë·∫ßu bu·ªìi nh∆∞ m√†y.",
    "Tao gay, √≠t ra c√≤n c√≥ gu. C√≤n m√†y th√¨ lo·∫°n gene v·ªõi c·∫£ n√£o t√†n.",
    "Gay m√† v·∫´n kh√¥n h∆°n m·∫•y ƒë·ª©a sinh ra ch·ªâ ƒë·ªÉ ng·ªìi ch·ª≠i d·∫°o nh∆∞ m√†y.",
    "Tao gay? V·∫≠y c√≤n m√†y? M√†y ƒëang ghen t·ªã v√¨ g√°i l·∫´n trai ƒë·ªÅu kh√¥ng ai th√®m m√†y √†?",
    "Tao gay, c√≤n m√†y l√† c√°i th·ª© n√£o ph·∫≥ng ƒëi b√¨nh ph·∫©m ng∆∞·ªùi kh√°c v√¨ kh√¥ng ai th√®m ch∆°i c√πng."
]

stupid_responses = [
    "T√¥i ngu? ·ª™, nh∆∞ng v·∫´n h∆°n c√°i ƒë·ªëng n√£o ph·∫≥ng ƒëang g√µ ph√≠m nh∆∞ b·∫°n.",
    "M√†y ch·ª≠i tao ngu, m√† ch√≠nh m√†y ƒëang tranh lu·∫≠n v·ªõi ng∆∞·ªùi m√†y g·ªçi l√† ngu. V·∫≠y ai ngu h∆°n?",
    "M√†y n√≥i chuy·ªán nh∆∞ n√£o m√†y ƒëang ch·∫°y th·ª≠ nghi·ªám beta v·∫≠y √°.",
    "Tao t∆∞·ªüng Discord n√†y c√≥ filter ngƒÉn lo√†i ƒë·∫ßu ƒë·∫•t v√¥ m√†?",
    "G√≥p √Ω m√† n√£o kh√¥ng b·∫≠t l√† ƒëang t·ª± nh·ª•c ƒë√≥ b·∫°n.",
    "Tao ngu m√† c√≤n d·∫°y ƒë∆∞·ª£c th·∫±ng ngu h∆°n ‚Äì m√†y ƒë√≥.",
    "N√≥i chuy·ªán v·ªõi m√†y tao th·∫•y t·ªôi cho Wi-Fi tao gh√™, ph·∫£i truy·ªÅn d·ªØ li·ªáu ngu li√™n t·ª•c.",
    "M√†y m√† l√† thi√™n t√†i th√¨ tao l√† ch√∫a t·ªÉ lo√†i ng∆∞·ªùi r·ªìi ƒë√≥ con.",
    "Tao kh√¥ng bi·∫øt n√™n c∆∞·ªùi hay kh√≥c v√¨ c√≥ ƒë·ª©a c√≤n thua c·∫£ tr√≠ th√¥ng minh c·ªßa c√°i bot tao l·∫≠p tr√¨nh.",
    "M√†y m√† th√¥ng minh th√¨ m·∫•y c√°i group toxic nh∆∞ n√†y gi·∫£i t√°n l√¢u r·ªìi."
]

def generate_mode_overwrite(mode: str) -> discord.PermissionOverwrite:
    allowed = []
    if mode == "1":
        allowed = ["view_channel", "add_reactions"]
    elif mode == "2":
        allowed = ["view_channel", "send_messages", "manage_messages", "add_reactions", "attach_files"]
    elif mode == "3":
        return discord.PermissionOverwrite(view_channel=False)

    overwrite = discord.PermissionOverwrite()
    for perm in discord.Permissions.VALID_FLAGS:
        setattr(overwrite, perm, perm in allowed)
    return overwrite

DENY_ALL = discord.PermissionOverwrite(
    view_channel=False, send_messages=False,
    manage_messages=False, add_reactions=False, attach_files=False
)

async def setup_bot(token):
    bot = commands.Bot(command_prefix="!", intents=intents)
    bots.append(bot)

    def admin_only():
        async def predicate(ctx):
            return ctx.author.guild_permissions.administrator
        return commands.check(predicate)

    @bot.event
    async def on_ready():
        print(f"[+] Bot {bot.user} ƒë√£ online!")
        await bot.change_presence(activity=discord.Activity(
            type=discord.ActivityType.watching,
            name="if anyone needs help~ üí´"
        ))

        async def auto_chat():
            await bot.wait_until_ready()
            while not bot.is_closed():
                for guild in bot.guilds:
                    for channel in guild.text_channels:
                        if channel.permissions_for(guild.me).send_messages:
                            try:
                                await channel.send("M√¨nh ƒëang online n√® üëÄ")
                                break
                            except:
                                pass
                            break
                await asyncio.sleep(1800)

        bot.loop.create_task(auto_chat())

    @bot.event
    async def on_message(message):
        if message.author == bot.user:
            return

        lowered = message.content.lower()
        if "bot gay" in lowered:
            await message.channel.send(random.choice(gay_responses))
        elif "bot ngu" in lowered:
            await message.channel.send(random.choice(stupid_responses))

        if bot.user.mentioned_in(message):
            await message.channel.send(f"{message.author.mention} Em ƒë√¢y!, anh mu·ªën em gi√∫p g√¨ n√†o?")

        await bot.process_commands(message)

    @bot.command()
    async def fun(ctx):
        await ctx.send(random.choice(fun_quotes))

    @bot.command()
    async def version(ctx):
        await ctx.send("Phi√™n b·∫£n hi·ªán t·∫°i: 1.0")

    @bot.command()
    @admin_only()
    async def setup(ctx):
        guild = ctx.guild
        author = ctx.author
        roles = [r for r in guild.roles if r.color.value != 0 and not r.is_default()]
        channels = [c for c in guild.channels if isinstance(c, discord.TextChannel)]

        role_list = "\n".join([f"{i}: {r.name}" for i, r in enumerate(roles)])
        await ctx.send(f"**Danh s√°ch Role:**\n{role_list}\n\nG√µ s·ªë role c√°ch nhau b·∫±ng d·∫•u ph·∫©y (vd: `0,2,3`)")

        def check_msg(m): return m.author == author and m.channel == ctx.channel
        try:
            msg_roles = await bot.wait_for("message", timeout=60.0, check=check_msg)
            selected_roles = [roles[int(i.strip())] for i in msg_roles.content.split(",") if i.strip().isdigit()]
        except:
            await ctx.send("‚õî Kh√¥ng nh·∫≠p h·ª£p l·ªá ho·∫∑c h·∫øt th·ªùi gian.")
            return

        chan_list = "\n".join([f"{i}: {c.name}" for i, c in enumerate(channels)])
        await ctx.send(f"**Danh s√°ch Channel:**\n{chan_list}\n\nG√µ s·ªë k√™nh c√°ch nhau b·∫±ng d·∫•u ph·∫©y (vd: `0,1,3`)")

        try:
            msg_chans = await bot.wait_for("message", timeout=60.0, check=check_msg)
            selected_channels = [channels[int(i.strip())] for i in msg_chans.content.split(",") if i.strip().isdigit()]
        except:
            await ctx.send("‚õî Kh√¥ng nh·∫≠p h·ª£p l·ªá ho·∫∑c h·∫øt th·ªùi gian.")
            return

        await ctx.send("Ch·ªçn mode:\n`1` - K√™nh Th√¥ng B√°o\n`2` - K√™nh Chat\n`3` - ·∫®n K√™nh\nNh·∫≠p s·ªë:")
        try:
            msg_mode = await bot.wait_for("message", timeout=30.0, check=check_msg)
            mode = msg_mode.content.strip()
            perm = generate_mode_overwrite(mode)
        except:
            await ctx.send("‚õî Kh√¥ng nh·∫≠p h·ª£p l·ªá ho·∫∑c h·∫øt th·ªùi gian.")
            return

        success = 0
        for channel in selected_channels:
            try:
                for role in selected_roles:
                    await channel.set_permissions(role, overwrite=perm)
                await channel.set_permissions(guild.default_role, overwrite=DENY_ALL)
                success += 1
            except Exception as e:
                await ctx.send(f"‚ö†Ô∏è L·ªói t·∫°i `{channel.name}`: {e}")

        await ctx.send(f"‚úÖ Ho√†n t·∫•t! ƒê√£ ch·ªânh quy·ªÅn cho `{success}` k√™nh.")

    @bot.command()
    @admin_only()
    async def delete(ctx):
        guild = ctx.guild
        author = ctx.author

        if ctx.message.channel_mentions:
            target_channel = ctx.message.channel_mentions[0]
        else:
            text_channels = [c for c in guild.channels if isinstance(c, discord.TextChannel)]
            chan_list = "\n".join([f"{i}: {c.name}" for i, c in enumerate(text_channels)])
            await ctx.send(f"**Danh s√°ch Channel:**\n{chan_list}\n\nNh·∫≠p s·ªë k√™nh mu·ªën x√≥a tin nh·∫Øn:")

            def check_msg(m): return m.author == author and m.channel == ctx.channel
            try:
                msg = await bot.wait_for("message", timeout=30.0, check=check_msg)
                index = int(msg.content.strip())
                target_channel = text_channels[index]
            except:
                await ctx.send("‚õî Kh√¥ng h·ª£p l·ªá ho·∫∑c h·∫øt th·ªùi gian.")
                return

        await ctx.send(f"üîÑ ƒêang x√≥a t·∫•t c·∫£ tin nh·∫Øn trong `{target_channel.name}`...")
        try:
            deleted = await target_channel.purge(limit=None)
            await ctx.send(f"‚úÖ ƒê√£ x√≥a `{len(deleted)}` tin nh·∫Øn trong `{target_channel.name}`.")
        except Exception as e:
            await ctx.send(f"‚ö†Ô∏è L·ªói khi x√≥a: {e}")

    @bot.command()
    @admin_only()
    async def fix(ctx):
        guild = ctx.guild
        await ctx.send("üîß ƒêang x·ª≠ l√Ω to√†n b·ªô k√™nh ƒë·ªÉ b·∫≠t quy·ªÅn xem l·ªãch s·ª≠ tin nh·∫Øn...")
        for channel in guild.text_channels:
            overwrites = channel.overwrites
            overwrite_changed = False
            for role in guild.roles:
                perms = channel.overwrites_for(role)
                if perms.read_message_history is not True:
                    perms.read_message_history = True
                    overwrites[role] = perms
                    overwrite_changed = True
            if overwrite_changed:
                try:
                    await channel.edit(overwrites=overwrites, reason="Enable Read Message History cho t·∫•t c·∫£ roles")
                except Exception as e:
                    print(f"[‚ùå] Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t quy·ªÅn cho {channel.name}: {e}")
        await ctx.send("‚úÖ ƒê√£ ho√†n t·∫•t c·∫≠p nh·∫≠t quy·ªÅn xem l·ªãch s·ª≠ tin nh·∫Øn!")

    @bot.command()
    @admin_only()
    async def fixfull(ctx):
        await ctx.send("‚ö†Ô∏è C·∫¢NH B√ÅO: L·ªánh n√†y s·∫Ω **c·∫•p to√†n b·ªô quy·ªÅn** cho t·∫•t c·∫£ roles (tr·ª´ @everyone) trong to√†n b·ªô k√™nh vƒÉn b·∫£n.\nG√µ `yes` trong 10 gi√¢y ƒë·ªÉ x√°c nh·∫≠n.")

        def check(m): return m.author == ctx.author and m.channel == ctx.channel and m.content.lower() == "yes"
        try:
            await bot.wait_for("message", timeout=10.0, check=check)
        except asyncio.TimeoutError:
            await ctx.send("‚ùå H·ªßy b·ªè v√¨ kh√¥ng x√°c nh·∫≠n.")
            return

        guild = ctx.guild
        await ctx.send("üîß ƒêang c·∫≠p nh·∫≠t to√†n b·ªô quy·ªÅn...")

        for channel in guild.text_channels:
            overwrites = channel.overwrites
            overwrite_changed = False
            for role in guild.roles:
                if role.is_default():
                    continue
                perms = discord.PermissionOverwrite()
                for perm_name in discord.Permissions.VALID_FLAGS:
                    setattr(perms, perm_name, True)
                overwrites[role] = perms
                overwrite_changed = True
            if overwrite_changed:
                try:
                    await channel.edit(overwrites=overwrites, reason="C·∫•p l·∫°i to√†n b·ªô quy·ªÅn cho t·∫•t c·∫£ roles")
                except Exception as e:
                    print(f"[‚ùå] L·ªói c·∫≠p nh·∫≠t k√™nh {channel.name}: {e}")
        await ctx.send("‚úÖ ƒê√£ ho√†n t·∫•t c·∫≠p nh·∫≠t to√†n b·ªô quy·ªÅn!")

    try:
        await bot.start(token)
    except Exception as e:
        print(f"[-] L·ªói khi kh·ªüi ƒë·ªông bot v·ªõi token {token[:10]}...: {e}")

async def main():
    await asyncio.gather(*[setup_bot(token) for token in tokens])

if __name__ == "__main__":
    asyncio.run(main())
